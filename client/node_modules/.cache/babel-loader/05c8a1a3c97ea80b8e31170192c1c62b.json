{"ast":null,"code":"var _jsxFileName = \"/home/miso/Documents/Learning_Projects/Complete React Developer in 2020/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { updateCollections, fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props; // render is a method that recives a function whose params are the props that component which will get renderd needs.\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/miso/Documents/Learning_Projects/Complete React Developer in 2020/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","updateCollections","fetchCollectionsStartAsync","selectIsCollectionFetching","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","componentDidMount","render","match","props","path","isCollectionFetching","mapStateToProps","createStructuredSelector","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,iBAAT,EAA4BC,0BAA5B,QAA8D,+BAA9D;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGL,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAErCC,KAFqC,GAE7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAF6B;AAAA;;AAMrCC,EAAAA,iBAAiB,GAAG;AAClBR,IAAAA,0BAA0B;AAC3B;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB,CADO,CAGP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAED,KAAK,CAACE,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGD,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEE;AAA3C,SAAqEF,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAED,KAAK,CAACE,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGD,KAAD,IAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEE;AAAtC,SAAgEF,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAKD;;AAnBoC;;AAsBvC,MAAMG,eAAe,GAAGC,wBAAwB,CAAC;AAC/CF,EAAAA,oBAAoB,EAAEZ;AADyB,CAAD,CAAhD;;AAIA,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACtClB,EAAAA,iBAAiB,EAAEmB,cAAc,IAAID,QAAQ,CAAClB,iBAAiB,CAACmB,cAAD,CAAlB;AADP,CAAL,CAAnC;;AAIA,eAAevB,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkCZ,QAAlC,CAAf","sourcesContent":["import React from 'react';\n\nimport { Route } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport { updateCollections, fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // shorthand for writing contstuctor super call and state\n  state = {\n    loading: true\n  };\n\n  componentDidMount() {\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const { match } = this.props;\n\n    // render is a method that recives a function whose params are the props that component which will get renderd needs.\n    return (\n      <div>\n        <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} />} />\n        <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={isCollectionFetching} {...props} />} />\n      </div >)\n  };\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}