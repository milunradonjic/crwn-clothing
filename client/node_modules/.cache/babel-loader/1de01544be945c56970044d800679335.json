{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    // get collections ref from firestore with id (key) 'collections'\n    const collectionsRef = firestore.collection('collections'); // yield is simillar to aysnc/await\n    // the value get returnd in promised form that is resolved with a value of our collectionsRef, which is our snapshot\n    // so no need for .then() because it's already resolved \n\n    const snapshot = yield collectionsRef.get(); // Creates an Effect description that instructs the middleware to call the function fn with args as arguments.\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // put behaves same as dispatch\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  console.log('test coll');\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/miso/Documents/Learning_Projects/Complete React Developer in 2020/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionsRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","console","log","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF;AACA,UAAMC,cAAc,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAvB,CAFE,CAIF;AACA;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,cAAc,CAACG,GAAf,EAAvB,CAPE,CASF;;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC,CAVE,CAYF;;AACA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAMlB,UAAU,CAACO,eAAe,CAACY,uBAAjB,EAA0CX,qBAA1C,CAAhB;AACD","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n  try {\n    // get collections ref from firestore with id (key) 'collections'\n    const collectionsRef = firestore.collection('collections');\n\n    // yield is simillar to aysnc/await\n    // the value get returnd in promised form that is resolved with a value of our collectionsRef, which is our snapshot\n    // so no need for .then() because it's already resolved \n    const snapshot = yield collectionsRef.get();\n\n    // Creates an Effect description that instructs the middleware to call the function fn with args as arguments.\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n\n    // put behaves same as dispatch\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\nexport function* fetchCollectionsStart() {\n  console.log('test coll')\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}"]},"metadata":{},"sourceType":"module"}