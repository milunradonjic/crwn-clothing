{"ast":null,"code":"'use strict';\n\nconst {\n  transformSync\n} = require('@babel/core');\n\nconst {\n  readFileSync\n} = require('fs');\n\nconst {\n  getNode,\n  getName,\n  isElement,\n  getHashmapFromComment\n} = require('./utils');\n\nconst createResolve = config => {\n  const NAME = config.name;\n\n  const getParser = () => {\n    const exports = {}; // TODO: reuse exports management with babel plugin\n\n    const addExport = (p, {\n      file\n    }) => {\n      const data = getNode(p);\n      if (!data) return;\n      const {\n        filename\n      } = file.opts;\n      const [name, ...additionalNames] = getName(data);\n      const id = config.getId(filename, name);\n      exports[name] = {\n        [NAME]: id\n      };\n      additionalNames.forEach(key => {\n        exports[key] = {\n          [NAME]: id\n        };\n      });\n    };\n\n    return {\n      exports,\n      plugin: () => ({\n        visitor: {\n          JSXElement(p, state) {\n            if (!isElement(p.node)) {\n              return;\n            }\n\n            addExport(p, state);\n          },\n\n          CallExpression(p, state) {\n            if (!isElement(p.node)) {\n              return;\n            }\n\n            addExport(p, state);\n          }\n\n        }\n      })\n    };\n  };\n\n  const cache = {};\n\n  const resolve = filename => {\n    if (!cache[filename]) {\n      const content = readFileSync(filename).toString();\n      const hashmap = getHashmapFromComment(content);\n\n      if (hashmap) {\n        cache[filename] = hashmap;\n      } else {\n        const parser = getParser();\n        transformSync(content, {\n          babelrc: false,\n          filename,\n          plugins: [...config.syntaxes, [parser.plugin]]\n        });\n        cache[filename] = parser.exports;\n      }\n    }\n\n    return cache[filename];\n  };\n\n  const resolveBy = resolver => path => resolve(resolver(path));\n\n  return {\n    resolve,\n    resolveBy\n  };\n};\n\nconst {\n  resolve,\n  resolveBy\n} = createResolve(require('./config'));\nmodule.exports = resolve;\nmodule.exports.default = resolve;\nmodule.exports.resolveBy = resolveBy;\nmodule.exports.createResolve = createResolve;","map":{"version":3,"sources":["/home/miso/Documents/Learning_Projects/Complete React Developer in 2020/crwn-clothing/node_modules/reselector/resolve.js"],"names":["transformSync","require","readFileSync","getNode","getName","isElement","getHashmapFromComment","createResolve","config","NAME","name","getParser","exports","addExport","p","file","data","filename","opts","additionalNames","id","getId","forEach","key","plugin","visitor","JSXElement","state","node","CallExpression","cache","resolve","content","toString","hashmap","parser","babelrc","plugins","syntaxes","resolveBy","resolver","path","module","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst {\n  transformSync\n} = require('@babel/core');\n\nconst {\n  readFileSync\n} = require('fs');\n\nconst {\n  getNode,\n  getName,\n  isElement,\n  getHashmapFromComment\n} = require('./utils');\n\nconst createResolve = config => {\n  const NAME = config.name;\n\n  const getParser = () => {\n    const exports = {}; // TODO: reuse exports management with babel plugin\n\n    const addExport = (p, {\n      file\n    }) => {\n      const data = getNode(p);\n      if (!data) return;\n      const {\n        filename\n      } = file.opts;\n      const [name, ...additionalNames] = getName(data);\n      const id = config.getId(filename, name);\n      exports[name] = {\n        [NAME]: id\n      };\n      additionalNames.forEach(key => {\n        exports[key] = {\n          [NAME]: id\n        };\n      });\n    };\n\n    return {\n      exports,\n      plugin: () => ({\n        visitor: {\n          JSXElement(p, state) {\n            if (!isElement(p.node)) {\n              return;\n            }\n\n            addExport(p, state);\n          },\n\n          CallExpression(p, state) {\n            if (!isElement(p.node)) {\n              return;\n            }\n\n            addExport(p, state);\n          }\n\n        }\n      })\n    };\n  };\n\n  const cache = {};\n\n  const resolve = filename => {\n    if (!cache[filename]) {\n      const content = readFileSync(filename).toString();\n      const hashmap = getHashmapFromComment(content);\n\n      if (hashmap) {\n        cache[filename] = hashmap;\n      } else {\n        const parser = getParser();\n        transformSync(content, {\n          babelrc: false,\n          filename,\n          plugins: [...config.syntaxes, [parser.plugin]]\n        });\n        cache[filename] = parser.exports;\n      }\n    }\n\n    return cache[filename];\n  };\n\n  const resolveBy = resolver => path => resolve(resolver(path));\n\n  return {\n    resolve,\n    resolveBy\n  };\n};\n\nconst {\n  resolve,\n  resolveBy\n} = createResolve(require('./config'));\nmodule.exports = resolve;\nmodule.exports.default = resolve;\nmodule.exports.resolveBy = resolveBy;\nmodule.exports.createResolve = createResolve;"]},"metadata":{},"sourceType":"script"}