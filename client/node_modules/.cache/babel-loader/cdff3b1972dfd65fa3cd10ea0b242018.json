{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    // get collections ref from firestore with id (key) 'collections'\n    const collectionsRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart()); // subscribe to listener\n    // when the snapshot changes it will fire\n\n    collectionsRef.onSnapshot(async snapshot => {\n      // transform snapshot to map\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // put it in a reducer\n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }, error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/home/miso/Documents/Learning_Projects/Complete React Developer in 2020/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","UPDATE_COLLECTIONS","payload","fetchCollectionsFailure","errorMessage","fetchCollectionsStartAsync","dispatch","collectionsRef","collection","onSnapshot","snapshot","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAGA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,kBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,kBADgC;AAEtDC,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA5C;AAKP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC9C,SAAOC,QAAQ,IAAI;AACjB;AACA,UAAMC,cAAc,GAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAvB;AACAF,IAAAA,QAAQ,CAACV,qBAAqB,EAAtB,CAAR,CAHiB,CAKjB;AACA;;AACAW,IAAAA,cAAc,CAACE,UAAf,CAA0B,MAAMC,QAAN,IAAkB;AAC1C;AACA,YAAMV,cAAc,GAAGL,+BAA+B,CAACe,QAAD,CAAtD,CAF0C,CAG1C;;AACAJ,MAAAA,QAAQ,CAACP,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALD,EAKGW,KAAK,IAAIL,QAAQ,CAACH,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CALpB;AAMD,GAbD;AAcD,CAfM","sourcesContent":["import ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: errorMessage\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    // get collections ref from firestore with id (key) 'collections'\n    const collectionsRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n\n    // subscribe to listener\n    // when the snapshot changes it will fire\n    collectionsRef.onSnapshot(async snapshot => {\n      // transform snapshot to map\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      // put it in a reducer\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }, error => dispatch(fetchCollectionsFailure(error.message)));\n  }\n};"]},"metadata":{},"sourceType":"module"}